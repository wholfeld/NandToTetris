// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array bitArray;
    static Array maskArray;
    static Array maskArrayR;
    static int screenStart;
    static int screenEnd;
    static boolean setBlack;

    /** Initializes the Screen. */
    function void init() {
        let bitArray = Array.new(16);
        let bitArray[0] = 1; // [1000000000000000]
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        let bitArray[15] = -1 & ~32767;//-32768; // [0000000000000001]
        //let bitArray[15] = -16384;  // [0000000000000001]

        let maskArray = Array.new(16);
        let maskArray[0] = -1;      // [1111111111111111]
        let maskArray[1] = -2;      // [0111111111111111]
        let maskArray[2] = -4;      // [0011111111111111]
        let maskArray[3] = -8;      // [0001111111111111]
        let maskArray[4] = -16;     // [0000111111111111]
        let maskArray[5] = -32;     // [0000011111111111]
        let maskArray[6] = -64;     // [0000001111111111]
        let maskArray[7] = -128;    // [0000000111111111]
        let maskArray[8] = -256;    // [0000000011111111]
        let maskArray[9] = -512;    // [0000000001111111]
        let maskArray[10] = -1024;  // [0000000000111111]
        let maskArray[11] = -2048;  // [0000000000011111]
        let maskArray[12] = -4096;  // [0000000000001111]
        let maskArray[13] = -8192;  // [0000000000000111]
        let maskArray[14] = -16384; // [0000000000000011]
        let maskArray[15] = -1 & ~32767;//-32768; // [0000000000000001]


        let maskArrayR = Array.new(16);
        //let maskArrayR[0] = 0;    // [0000000000000000]
        let maskArrayR[0] = 1;      // [1000000000000000]
        let maskArrayR[1] = 3;      // [1100000000000000]
        let maskArrayR[2] = 7;      // [1110000000000000]
        let maskArrayR[3] = 15;     // [1111000000000000]
        let maskArrayR[4] = 31;     // [1111100000000000]
        let maskArrayR[5] = 63;     // [1111110000000000]
        let maskArrayR[6] = 127;    // [1111111000000000]
        let maskArrayR[7] = 255;    // [1111111100000000]
        let maskArrayR[8] = 511;    // [1111111110000000]
        let maskArrayR[9] = 1023;  //  [1111111111000000]
        let maskArrayR[10] = 2047;  // [1111111111100000]
        let maskArrayR[11] = 4095;  // [1111111111110000]
        let maskArrayR[12] = 8191;  // [1111111111111000]
        let maskArrayR[13] = 16383; // [1111111111111100]
        let maskArrayR[14] = 32767; // [1111111111111110]
        let maskArrayR[15] = -1; //    [1111111111111111]
        // let maskArray[15] = 32767;  [1111111111111110]
        let screenStart = 16384;
        let screenEnd = 24575;
        let setBlack = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int screenEnd;
        var int itr;
        let itr = screenStart;
        while (itr < screenEnd) {
            do Memory.poke(itr, 0);
            let itr = itr + 1;
        }
        return;
    }

    function void testArrays() {
        var int counter;
        var int memLoc;

        let counter = 0;
        let memLoc = screenStart;

        while (counter < 16) {
            do Memory.poke(memLoc, bitArray[counter]);
            do Memory.poke(memLoc + 2, maskArray[counter]);
            do Memory.poke(memLoc + 4, maskArrayR[counter]);
            let memLoc = memLoc + 32;
            let counter = counter + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let setBlack = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int xMemColumns;
        var int memLoc;
        var int xIndex;
        var int peekMem;
        var int invertbit;
        let xMemColumns = x/16;
        let memLoc = (y * 32) + xMemColumns + 16384;
        let xIndex = x - (xMemColumns * 16);
        let peekMem = Memory.peek(memLoc);
        if (setBlack) {
            do Memory.poke(memLoc, peekMem | bitArray[xIndex]);
        } else {
            let invertbit = ~bitArray[xIndex];
            do Memory.poke(memLoc, peekMem & invertbit);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a;
        var int b;
        var int dx;
        var int dy;
        var int diff;
        //do Screen.drawPixel(x1, y1);

        if (x2 < x1) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }
        else {
            let a = 0;
            let b = 0;
            let dx = x2 - x1;
            let dy = Math.abs(y2 - y1);
            let diff = 0;
            while ((a < dx) & (b < dy)){
                if (y2 > y1) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                } else {
                    do Screen.drawPixel(x1 + a, y1 - b);
                }
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        // do Memory.poke(17002, -32767);
        // do Memory.poke(17002, -16384);
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int remainder;
        var int memoryLocation;
        var int column;
        var int y;
        var int memInt;
        let column = x/16;
        let remainder = Screen.getRemainder(x, 16);
        let y = y2;
        if (y1 > y2) {
            let y2 = y1;
            let y1 = y;
        }
        let memoryLocation = (y1 * 32) + column + 16384;
        while (y1 < y2) {
            let y1 = y1 + 1;
            let memInt = Memory.peek(memoryLocation);
            do Memory.poke(memoryLocation, (memInt | bitArray[remainder]));
            let memoryLocation = memoryLocation + 32;
        }

        //do Memory.poke(memLoc, peepMem | bitArray[xIndex]);
        //do Memory.poke(17000, -8192);
        // do Memory.poke(17000, -1);
        // do Memory.poke(17001, -8192);
        //do Memory.poke(17002, -16384);
        // do Memory.poke(17002, -32768);
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x1Column;
        var int x1Remainder;
        var int x2Column;
        var int x2Remainder;
        var int curColumn;
        var int memoryLocation;
        var int memPeek;
        var int invertbit;
        let x1Column = x1/16;
        let x1Remainder = Screen.getRemainder(x1, 16);
        let x2Column = x2/16;
        let x2Remainder = Screen.getRemainder(x2, 16);
        let curColumn = x1Column + 1;
        let memoryLocation = (y * 32) + x1Column + 16384;
        let memPeek = Memory.peek(memoryLocation);
        if (setBlack) {
            do Memory.poke(memoryLocation, memPeek | maskArray[x1Remainder]);
        } else {
            let invertbit = ~maskArray[x1Remainder];
            do Memory.poke(memoryLocation, memPeek & invertbit);
        }
        while (curColumn < (x2Column)) {
            let curColumn = curColumn + 1;
            let memoryLocation = memoryLocation + 1;
            if (setBlack) {
                do Memory.poke(memoryLocation, -1);
            } else {
                do Memory.poke(memoryLocation, 0);
            }
        }
        let memoryLocation = memoryLocation + 1;
        let memPeek = Memory.peek(memoryLocation);
        if (setBlack) {
            do Memory.poke(memoryLocation, memPeek | maskArrayR[x2Remainder]);
        } else {
            let invertbit = ~maskArrayR[x2Remainder];
            do Memory.poke(memoryLocation, memPeek & invertbit);
        }
        return;
    }

    function int getRemainder(int numerator, int denominator) {
        var int divCount;
        let divCount = numerator / denominator;
        return numerator - (denominator * divCount);
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y1 < y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
