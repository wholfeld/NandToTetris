// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        var int mLength;
        let mLength = 1;
        if (maxLength > 0) {
            let mLength = maxLength;
        }
        let str = Array.new(mLength);
        let capacity = mLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        //do str.dispose();
        //do Memory.deAlloc(this);
        do Memory.deAlloc(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length - 1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isNeg;
        var int val;
        var int i;
        let val = 0;
        let i = 0;
        if (str[0] = 45) {
            let isNeg = true;
            let i = 1;
        } else {
            let isNeg = false;
        }
        while (i < length) {
            if ((str[i] > 47) & (str[i] < 58)) {
                let val = val * 10 + str[i] - 48;
                let i = i + 1;
            } else {
                if (isNeg) {
                    let val = val * -1;
                }
                return val;
            }
        }
        if (isNeg) {
            let val = val * -1;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int divisor;
        var int valTemp;
        var int nextVal;
        let divisor = 1;
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            let val = val * -1;
        }
        let valTemp = val;
        while (valTemp > 10) {
            let divisor = divisor * 10;
            let valTemp = valTemp / 10;
        }
        while (divisor > 0) {
            let nextVal = val / divisor;
            do appendChar(nextVal + 48);
            let val = val - (nextVal * divisor);
            let divisor = divisor / 10;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        var char c;
        let c = 128;
        return c;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        var char c;
        let c = 129;
        return c;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        var char c;
        let c = 34;
        return c;
    }
}