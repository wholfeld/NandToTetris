// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
    static int ram;
    static int heap;
    // static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        // let freeList = 0; // to 16483
        let heap[0] = 0;
        let heap[1] = 16383 - 2048 - 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int allocLocation;
        let heap[1] = heap[1] - size - 2;
        let allocLocation = heap + heap[1] + 1;
        let allocLocation[-1] = size;
        let allocLocation[-2] = 0; //next location is null
        return allocLocation;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    // function int alloc(int size) {
    //     var int prevPointer;
    //     var int pointer;
    //     let prevPointer = heap;
    //     let pointer = heap;

    //     while (size > pointer[0]) {
    //         let prevPointer = pointer;
    //         let pointer = pointer[1];
    //     }
    //     let pointer[0] = pointer[0] - size;
    //     if (pointer[0] = 1) {
    //         if (prevPointer[1] = pointer[1]) {
    //             let heap = pointer[1];
    //         } else {
    //             let prevPointer[1] = pointer[1];
    //         }
    //         return pointer;
    //     }
    //     else {
    //         return pointer + pointer[0] - size;
    //     }
    // }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) { 
        // let object[0] = heap[0];
        // let heap = object;
        return;
    }

    // /** Finds an available RAM block of the given size and returns
    //  *  a reference to its base address. */
    // function int alloc(int size) {
    //   var int next;
    //   let next = heap[0];    // next points to next freelist, next+1->length
    //   while(heap[next+1] < (size + 2)) {
    //     let next = heap[next];
    //   }
    //   // update the length of the freelist we used for this alloc
    //   let heap[next+1] = heap[next+1] - (size+1);

    //   // the location we allocate
    //   let heap[heap[next+1] + 1] = size + 1;
    //   /*
    //   do Output.printInt(heap[next+1] + 1);
    //   do Output.println();
    //   do Output.printInt(heap[heap[next+1] + 1]);
    //   */

    //   return heap[next+1] + 2;
    // }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    // function void deAlloc(Array o) {
    //   var int next;
    //   var int ptr;
    //   let next = 1;
    //   while(~(heap[next] = 0)) {
    //   /*
    //     do Output.printString("next: ");
    //     do Output.printInt(next);
    //     do Output.println();
    //     */
    //     let next = heap[next];
    //   }
    //   let ptr = o-1;
    //   let heap[ptr] = 0;
    //   let heap[next] = ptr;

    //   return;
    // }
}